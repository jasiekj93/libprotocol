/**
 * @file Escapes.test.cpp
 * @author Adrian Szczepanski
 * @date 2025-05-06
 */

#include <libprotocol/Escapes.hpp>

#include <CppUTest/TestHarness.h>

using namespace protocol;

TEST_GROUP(EscapesTest)
{
    static constexpr Byte ESC = 0x7E;
    static constexpr Byte STR = 0x01;
    static constexpr Byte END = 0x02;

    const etl::vector<Byte, 2> flags = { STR, END };

    EscapeConfig config = {
        .escapeChar = ESC,
        .escapedCharacters = flags
    };
   
	void setup()
	{

	}

	void teardown()
	{
		
	}
};

TEST(EscapesTest, addEscapes_noEscapes)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { STR, END };
    etl::vector<Byte, 10> expected = { ESC, STR, ESC, END };

    CHECK(addEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, addEscapes_noEscapes_outputTooSmall)
{
    etl::vector<Byte, 2> output;
    etl::vector<Byte, 10> input = { STR, END };

    CHECK_FALSE(addEscapes(input, output, config));
}

TEST(EscapesTest, addEscapes_withEscapes)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { STR, ESC, END };
    etl::vector<Byte, 10> expected = { ESC, STR, ESC, ESC, ESC, END };

    CHECK(addEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, removeEscapes_noEscapes)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { STR, END };
    etl::vector<Byte, 10> expected = { STR, END };

    CHECK(removeEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, removeEscapes_noEscapes_outputTooSmall)
{
    etl::vector<Byte, 1> output;
    etl::vector<Byte, 10> input = { STR, END };

    CHECK_FALSE(removeEscapes(input, output, config));
}

TEST(EscapesTest, removeEscapes_withEscapes)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { ESC, STR, ESC, END };
    etl::vector<Byte, 10> expected = { STR, END };

    CHECK(removeEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, removeEscapes_withEscapesInOutput)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { ESC, STR, ESC, ESC, ESC, END };
    etl::vector<Byte, 10> expected = { STR, ESC, END };

    CHECK(removeEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, removeEscapes_onlyEscapes)
{
    etl::vector<Byte, 10> output;
    etl::vector<Byte, 10> input = { ESC, ESC, ESC, ESC, ESC, ESC };
    etl::vector<Byte, 10> expected = { ESC, ESC, ESC };

    CHECK(removeEscapes(input, output, config));
    CHECK(output == expected);
}

TEST(EscapesTest, findFlag_startFlag)
{
    etl::vector<Byte, 100> input = { STR, 0xA6, ESC, STR, ESC, END, ESC, ESC, 0xF2, 0x08, END };

    auto it = findFlag(input, STR, ESC);
    CHECK(it == input.begin());
}

TEST(EscapesTest, findFlag_endFlag)
{
    etl::vector<Byte, 100> input = { STR, 0xA6, ESC, STR, ESC, END, ESC, ESC, 0xF2, 0x08, END };

    auto it = findFlag(input, END, ESC);
    CHECK(it == etl::prev(input.end()));
}

// TEST(EscapesTest, findFlag_inTheMiddle)
// {
//     etl::vector<Byte, 100> input = {0x01, 0x7e, 0x01, 0x93, 0x0b, 0x1f, 0x14, 0xb4, 0x3f, 0x9a, 0x73, 0x85, 0xb2, 0xf3, 0x29, 0xac, 0x10, 0x78, 0x66, 0x93, 0x9a, 0x80, 0x75, 0xe2, 0x7e, 0x7e, 0x5e, 0x56, 0x37, 0xc6, 0x2d, 0x8f,
//         0x5c, 0xdc, 0xf8, 0x83, 0x86, 0x63, 0x51, 0xb2, 0x35, 0xa5, 0x61, 0xd8, 0x7b, 0x00, 0x5d, 0x29, 0x40, 0x87, 0x70, 0x04, 0x86, 0x54, 0xcc, 0x87, 0x45, 0x96, 0x33, 0x1b, 0x47, 0xee, 0x10, 0x6d, 0x56, 0x09, 0xc1, 0x9f, 0x59, 0x30, 0xcb, 0x86, 0x0a, 0x3c, 0x6f,
//         0x5a, 0x5, 0xa9, 0x63, 0xe7, 0xc7, 0xea, 0x90, 0x23, 0x0, 0x66, 0x7, 0x1f, 0x83, 0xf7, 0xca, 0x53, 0x2c, 0xe9, 0xdc, 0xaa, 0x2a, 0x8d, 0x7a, 0xb, 0x94, 0xbc, 0xba, 0xe6, 0xba, 0x10, 0x74, 0x26, 0x90, 0x54, 0xba, 0x35, 0x40, 0xd2, 0xd, 0x8e, 0x92, 0x89,
//         0x58, 0x9c, 0xf2, 0xb5, 0x05, 0xc8, 0x03, 0xfe, 0x45, 0x28, 0x3d, 0x30, 0xb9, 0x90, 0xf7, 0x07, 0x15, 0x4e, 0x8b, 0x0e, 0x95, 0x91, 0xe6, 0xd8, 0x25, 0xd0, 0xaa, 0x22, 0xb2, 0x72, 0x95, 0x11, 0xb7, 0x09, 0x50, 0xf0, 0x25, 0xc2, 0x40, 0x2d, 0xb2, 0x34, 0x4f,
//         0xab, 0xfc, 0xc5, 0x63, 0x46, 0xb7, 0xda, 0x3f, 0x9b, 0x8c, 0xbd, 0x84, 0xa7, 0xf9, 0x9f, 0xce, 0xc6, 0xdf, 0xc8, 0xc2, 0x8f, 0xcf, 0xbe, 0x19, 0xac, 0x6b, 0xb2, 0xad, 0x52, 0xa9, 0xde, 0xd1, 0x8b, 0x78, 0xb5, 0xc6, 0xee, 0x42, 0x8c, 0x7d, 0x1e, 0xd2,
//         0x0c, 0xf0, 0xab, 0xe4, 0xf3, 0x42, 0xf1, 0x57, 0xe9, 0xa7, 0xc9, 0x87, 0x80, 0xce, 0x82, 0x49, 0xb6, 0x05, 0x5a, 0x6f, 0x92, 0x71, 0x39, 0x73, 0x9e, 0x5e, 0x1d, 0x68, 0x8a, 0xe6, 0x14, 0x39, 0x8e, 0xd5, 0xa4, 0x93, 0x66, 0x87, 0x6f, 0x52, 0xc4, 0x6c, 0xa8,
//         0xf3, 0xb4, 0x3e, 0xd1, 0x1e, 0xa5, 0x3e, 0xaa, 0x43, 0x29, 0xe5, 0xc2, 0x45, 0x28, 0xe2, 0x7e, 0x02, 0x02, 
//         0x01, 0x10, 0x2c, 0xf8, 0xea, 0x99, 0x1a, 0xee, 0x24, 0xf4, 0x6f, 0xa1, 0xcd, 0xc9, 0xdc, 0xa1, 0x28, 0xac, 0xb2, 0x6c, 0x52, 0x46, 0x9a, 0xa1, 0xa4, 0x48, 0xdd, 0xdd, 0x56, 0x68, 0x2f, 0x86, 0x79, 0xb6, 0x71, 0x31, 0xc9, 0xa0, 0x5b, 0x9a, 0xbe, 0x1e, 0x3d, 0xf9, 0xfa, 0xe4, 0x47, 0x6f, 0x3c, 0xf0, 0x87, 0x7f, 0xed, 0xe0, 0x7f, 0xcf, 0xc7, 0xb2, 0xff, 0x4f, 0x8e, 0x13, 0x8f, 0x59, 0xc7, 0xfc, 0xfd, 0xff, 0xdd, 0xed, 0xad, 0xf2, 0x8e, 0xb1, 0xff, 0xbf, 0x5d, 0x81, 0xa4, 0xbf, 0xf6, 0xff, 0xff, 0x80, 0x47, 0xdb, 0xa3,
//         0x4c, 0xba, 0x5f, 0xdd, 0x61, 0x8c, 0xb7, 0xf6, 0x04, 0x97, 0x44, 0xb4, 0x29, 0x46, 0x1b, 0x64, 0xbe, 0xba, 0xb7, 0x88, 0xa5, 0x0f, 0x0f, 0x69, 0x83, 0x8a, 0x76, 0x9a, 0x4a, 0x08, 0x24, 0xf9, 0x50, 0x9b, 0x4c, 0x68, 0x17, 0x9d, 0xff, 0xea, 0xd0, 0xae, 0x17, 0xa5, 0x8d, 0x7c, 0x37, 0xf2, 0x22, 0xbe, 0xcb, 0x1f, 0x05, 0x37, 0x1e, 0xbb, 0x71, 0x21, 0x4f, 0xde, 0xdd, 0xc5, 0xa4, 0x56, 0xf5, 0x77, 0x8d, 0x6f, 0xb2, 0xae, 0x9b, 0xb5, 0xf1, 0xc4, 0x5f, 0x42, 0x68, 0x57, 0xbd, 0xdd, 0x7a, 0xef, 0xb4, 0x5b, 0x97, 0xdd, 0x86, 0x99, 0xf8,
//         0xf2, 0xc2, 0x9e, 0xfe, 0xbe, 0xf1, 0xb2, 0xd3, 0xaa, 0xbf, 0x6d, 0x74, 0xed, 0x9f, 0xcf, 0x9a, 0x27, 0x27, 0xa7, 0x0d, 0xdc, 0xff, 0xed, 0x98, 0x9f, 0xea, 0xb5, 0x6e, 0x1d, 0x37, 0xd4, 0x33, 0xeb, 0x4b, 0x65, 0xd8, 0x7c, 0xf2, 0x44, 0x73, 0xcd, 0x53, 0x77, 0x38, 0xaf, 0xc3, 0x60, 0x1c, 0xe8, 0x1b, 0x9c, 0xe6, 0x96, 0xe7, 0x70, 0x36, 0x26, 0xaf, 0x29, 0x77, 0xa4, 0xa6, 0xde, 0x78, 0x37, 0x41, 0x78, 0xaf, 0xe7, 0x83, 0x75, 0x84, 0x67, 0x6e, 0xa9, 0x82, 0x48, 0x57, 0x93, 0x70, 0xab, 0xcf, 0x0e, 0x62, 0x02 };

//     auto it = findFlag(input, 0xFF, ESC);
//     CHECK_FALSE(it == input.end());
// }