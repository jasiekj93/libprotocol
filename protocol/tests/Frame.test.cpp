/**
 * @file Frame.test.cpp
 * @author Adrian Szczepanski
 * @date 2025-05-06
 */

#include <libprotocol/Frame.hpp>

#include <CppUTest/TestHarness.h>

using namespace protocol;

TEST_GROUP(FrameTest)
{
	void setup()
	{

	}

	void teardown()
	{
		
	}
};

TEST(FrameTest, control_fromByte)
{
    Frame::Control control(0xA7);

    CHECK_EQUAL(control.isFinal, true);
    CHECK(control.type == Frame::Control::Type::CONNECT);
    CHECK_EQUAL(control.id.get(), 0xA);
}

TEST(FrameTest, control_toByte)
{
    Frame::Control control(0xA7);
    CHECK_EQUAL(control.toByte(), 0xA7);
}

TEST(FrameTest, serialize)
{
    etl::vector<Byte, 10> payload = { 0xF1, 0xF2, 0xF3, 0xF4 };
    etl::vector<Byte, 100> expected = { Frame::START, 0xA6, 0xF1, 0xF2, 0xF3, 0xF4, 0xDE, 0x61, Frame::END };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> output;

    Frame frame(0xA6, payload);
    auto size = frame.serialize(output);

    CHECK_EQUAL(expected.size(), size);
    MEMCMP_EQUAL(expected.data(), output.data(), expected.size());
}

TEST(FrameTest, serialize_withEscapes)
{
    etl::vector<Byte, 10> payload = { Frame::START, Frame::END, Frame::ESC };
    etl::vector<Byte, 100> expected = { Frame::START, 0xA6, Frame::ESC, Frame::START, Frame::ESC, Frame::END, Frame::ESC, Frame::ESC, 0xF2, 0x08, Frame::END };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> output;

    Frame frame(0xA6, payload);
    auto size = frame.serialize(output);

    CHECK_EQUAL(expected.size(), size);
    MEMCMP_EQUAL(expected.data(), output.data(), expected.size());
}

TEST(FrameTest, serialize_noPayload)
{
    etl::vector<Byte, 100> expected = { Frame::START, 0xA6, 0x80, 0x7A, Frame::END };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> output;

    Frame frame(0xA6, {});
    auto size = frame.serialize(output);

    CHECK_EQUAL(expected.size(), size);
    MEMCMP_EQUAL(expected.data(), output.data(), expected.size());
}

TEST(FrameTest, serialize_controlIsEscaped)
{
    etl::vector<Byte, 100> expected = { Frame::START, Frame::ESC, Frame::START, 0xC1, 0xC0, Frame::END };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> output;

    Frame frame(Frame::START, {});
    auto size = frame.serialize(output);

    CHECK_EQUAL(expected.size(), size);
    MEMCMP_EQUAL(expected.data(), output.data(), expected.size());
}

TEST(FrameTest, serialize_crcIsEscaped)
{
    etl::vector<Byte, 100> expected = { Frame::START, 0x03, 0x40, Frame::ESC ,0x01, Frame::END };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> output;

    Frame frame(0x03, {});
    auto size = frame.serialize(output);

    CHECK_EQUAL(expected.size(), size);
    MEMCMP_EQUAL(expected.data(), output.data(), expected.size());
}

TEST(FrameTest, find)
{
    etl::vector<Byte, 10> payload = { 0xF1, 0xF2, 0xF3, 0xF4 };
    etl::vector<Byte, 100> input = { Frame::START, 0xA6, 0xF1, 0xF2, 0xF3, 0xF4, 0xDE, 0x61, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == input.end());
    CHECK(result.has_value());
    CHECK(Frame(0xA6, payload) == result.value());
}

TEST(FrameTest, find_withEscapes)
{
    etl::vector<Byte, 10> payload = { Frame::START, Frame::END, Frame::ESC };
    etl::vector<Byte, 100> input = { Frame::START, 0xA6, Frame::ESC, Frame::START, Frame::ESC, Frame::END, Frame::ESC, Frame::ESC, 0xF2, 0x08, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == input.end());
    CHECK(result.has_value());
    CHECK(Frame(0xA6, payload) == result.value());
}

TEST(FrameTest, find_noPayload)
{
    etl::vector<Byte, 100> input = { Frame::START, 0xA6, 0x80, 0x7A, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == input.end());
    CHECK(result.has_value());
    CHECK(Frame(0xA6, {}) == result.value());
}

TEST(FrameTest, find_controlIsEscaped)
{
    etl::vector<Byte, 100> input = { Frame::START, Frame::ESC, Frame::START, 0xC1, 0xC0, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == input.end());
    CHECK(result.has_value());
    CHECK(Frame(Frame::START, {}) == result.value());
}

TEST(FrameTest, find_crcIsEscaped)
{
    etl::vector<Byte, 100> input = { Frame::START, 0x03, 0x40, Frame::ESC ,0x01, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == input.end());
    CHECK(result.has_value());
    CHECK(Frame(0x03, {}) == result.value());
}

TEST(FrameTest, find_twoFrames)
{
    etl::vector<Byte, 100> input = { Frame::START, 0xA6, 0x80, 0x7A, Frame::END, 
        0x00, 0x00, 0x00, 0x00, 0x00, 
        Frame::START, 0xA6, 0x80, 0x7A, Frame::END };

    auto [result, it] = Frame::find(input);

    CHECK(it == etl::next(input.begin(), 5));
    CHECK(result.has_value());
    CHECK(Frame(0xA6, {}) == result.value());

    auto [result2, it2] = Frame::find({it, input.end()});

    CHECK(it2 == input.end());
    CHECK(result2.has_value());
    CHECK(Frame(0xA6, {}) == result2.value());
}

TEST(FrameTest, find_fromLiveTests)
{
    etl::vector<Byte, 500> input = { 
        0x1b, 0xf8, 0x83, 0x35, 0x31, 0x48, 0x51, 0xf5, 0x9f, 0x96, 0x58, 0xfa, 0x83, 0x37, 0x1e, 0x98, 
        0x4d, 0xe1, 0x1f, 0x4, 0xd1, 0xd7, 0x58, 0xcf, 0xbb, 0x2, 0x81, 0xfb, 0x42, 0x8, 0x36, 0xa7, 
        0xef, 0x46, 0xd3, 0xe7, 0x7a, 0x96, 0xe3, 0x2, 0x81, 0x37, 0x5a, 0x61, 0x80, 0x81, 0x49, 0xc6, 
        0x8f, 0xae, 0x17, 0xc0, 0x41, 0x6c, 0x74, 0x28, 0x77, 0xd7, 0x30, 0xd5, 0x16, 0x38, 0xe, 0x3f, 0xbc, 
        0x10, 0x50, 0x6c, 0xc4, 0x57, 0x19, 0x66, 0x8d, 0xf2, 0x17, 0xd3, 0x54, 0xa7, 0xf4, 0x67, 0xcf, 0x1e, 
        0x8f, 0xdc, 0x50, 0x5b, 0x64, 0x21, 0x37, 0xa8, 0x30, 0x6e, 0x2c, 0xdf, 0x47, 0xde, 0x78, 0x11, 0x89, 
        0xb1, 0xd7, 0x16, 0x90, 0x6, 0x41, 0x1a, 0x2d, 0xd2, 0xfa, 0x5c, 0xc8, 0x40, 0xe, 0xea, 0x19, 0x55, 0xba, 
        0xdc, 0xb8, 0x4b, 0x2a, 0x44, 0xb1, 0xbb, 0xc6, 0xae, 0xbc, 0xe9, 0x9, 0x49, 0x83, 0x42, 0x32, 0x2f, 0x8a, 
        0xb9, 0xcf, 0x6c, 0x8e, 0x68, 0x68, 0xcf, 0x9f, 0xca, 0x31, 0x9f, 0x1a, 0x56, 0x20, 0xd8, 0xf7, 0xed, 0xd8, 
        0x63, 0x87, 0x95, 0x3f, 0xef, 0x97, 0x8b, 0xe6, 0xc8, 0x63, 0x85, 0x8c, 0x1, 0x75, 0xcc, 0x76, 0x76, 0x6d, 
        0x2c, 0x40, 0xbc, 0xc2, 0xd2, 0x3, 0x16, 0xf8, 0xa6, 0x6c, 0xcb, 0x9f, 0xc2, 0xc2, 0xc2, 0x31, 0x5f, 0x73, 
        0xd7, 0xf2, 0x3c, 0x3, 0xab, 0xe5, 0x6b, 0xf9, 0xca, 0xbc, 0x11, 0xac, 0xed, 0xf2, 0x37, 0xf0, 0x11, 0xab, 
        0xce, 0xee, 0xa2, 0xc, 0xe6, 0xfb, 0x5e, 0xdf, 0xb4, 0xc1, 0x30, 0x1b, 0x47, 0xfe, 0x15, 0x2a, 0xa9, 0xfd, 0x6b, 
        0x37, 0x3c, 0x2e, 0x14, 0x24, 0xa7, 0x1d, 0x1f, 0x57, 0x41, 0x12, 0x3f, 0x85, 0xa9, 0xea, 0xd5, 0x2b, 0x53, 0x51, 
        0x78, 0x0, 0xb0, 0xca, 0xee, 0x23, 0x2, 0xdb, 0x67, 0x8f, 0x6 };
    etl::vector<Byte, Frame::MAX_ESCAPED_FRAME_SIZE> buffer;

    Frame frame(Frame::Control::Type::DATA, Frame::Control::Id(14), input);
    frame.serialize(buffer);

    auto [result, it] = Frame::find(buffer);

    CHECK(result.has_value());
    CHECK(frame == result.value());

}

TEST(FrameTest, find_fromLiveTests2)
{
    etl::vector<Byte, 1000> buffer = { 
        0x01, 0x7e, 0x01, 0x93, 0x0b, 0x1f, 0x14, 0xb4, 0x3f, 0x9a, 0x73, 0x85, 0xb2, 0xf3, 0x29, 0xac, 0x10, 0x78, 0x66, 0x93, 0x9a, 0x80, 0x75, 0xe2, 0x7e, 0x7e, 0x5e, 0x56, 0x37, 0xc6, 0x2d, 0x8f, 0x5c, 0xdc, 0xf8, 0x83, 0x86, 0x63, 0x51, 0xb2, 0x35, 0xa5, 0x61, 0xd8, 0x7b, 0x00, 0x5d, 0x29, 0x40, 0x87, 0x70, 0x04, 0x86, 0x54, 0xcc, 
        0x87, 0x45, 0x96, 0x33, 0x1b, 0x47, 0xee, 0x10, 0x6d, 0x56, 0x09, 0xc1, 0x9f, 0x59, 0x30, 0xcb, 0x86, 0x0a, 0x3c, 0x6f, 0x5a, 0x05, 0xa9, 0x63, 0xe7, 0xc7, 0xea, 0x90, 0x23, 0x00, 0x66, 0x07, 0x1f, 0x83, 0xf7, 0xca, 0x53, 0x2c, 0xe9, 0xdc, 0xaa, 0x2a, 0x8d, 0x7a, 0x0b, 0x94, 0xbc, 0xba, 0xe6, 0xba, 0x10, 0x74, 0x26, 0x90, 0x54, 
        0xba, 0x35, 0x40, 0xd2, 0x0d, 0x8e, 0x92, 0x89, 0x58, 0x9c, 0xf2, 0xb5, 0x05, 0xc8, 0x03, 0xfe, 0x45, 0x28, 0x3d, 0x30, 0xb9, 0x90, 0xf7, 0x07, 0x15, 0x4e, 0x8b, 0x0e, 0x95, 0x91, 0xe6, 0xd8, 0x25, 0xd0, 0xaa, 0x22, 0xb2, 0x72, 0x95, 0x11, 0xb7, 0x09, 0x50, 0xf0, 0x25, 0xc2, 0x40, 0x2d, 0xb2, 0x34, 0x4f, 0xab, 0xfc, 0xc5, 0x63, 0x46, 
        0xb7, 0xda, 0x3f, 0x9b, 0x8c, 0xbd, 0x84, 0xa7, 0xf9, 0x9f, 0xce, 0xc6, 0xdf, 0xc8, 0xc2, 0x8f, 0xcf, 0xbe, 0x19, 0xac, 0x6b, 0xb2, 0xad, 0x52, 0xa9, 0xde, 0xd1, 0x8b, 0x78, 0xb5, 0xc6, 0xee, 0x42, 0x8c, 0x7d, 0x1e, 0xd2, 0x0c, 0xf0, 0xab, 0xe4, 0xf3, 0x42, 0xf1, 0x57, 0xe9, 0xa7, 0xc9, 0x87, 0x80, 0xce, 0x82, 0x49, 0xb6, 
        0x05, 0x5a, 0x6f, 0x92, 0x71, 0x39, 0x73, 0x9e, 0x5e, 0x1d, 0x68, 0x8a, 0xe6, 0x14, 0x39, 0x8e, 0xd5, 0xa4, 0x93, 0x66, 0x87, 0x6f, 0x52, 0xc4, 0x6c, 0xa8, 0xf3, 0xb4, 0x3e, 0xd1, 0x1e, 0xa5, 0x3e, 0xaa, 0x43, 0x29, 0xe5, 0xc2, 0x45, 0x28, 0xe2, 0x7e, 0x02, 0x02, 0x01, 0x10, 0x2c, 0xf8, 0xea, 0x99, 0x1a, 0xee, 0x24, 0xf4, 0x6f, 
        0xa1, 0xcd, 0xc9, 0xdc, 0xa1, 0x28, 0xac, 0xb2, 0x6c, 0x52, 0x46, 0x9a, 0xa1, 0xa4, 0x48, 0xdd, 0xdd, 0x56, 0x68, 0x2f, 0x86, 0x79, 0xb6, 0x71, 0x31, 0xc9, 0xa0, 0x5b, 0x9a, 0xbe, 0x1e, 0x3d, 0xf9, 0xfa, 0xe4, 0x47, 0x6f, 0x3c, 0xf0, 0x87, 0x7f, 0xed, 0xe0, 0x7f, 0xcf, 0xc7, 0xb2, 0xff, 0x4f, 0x8e, 0x13, 0x8f, 0x59, 0xc7, 
        0xfc, 0xfd, 0xff, 0xdd, 0xed, 0xad, 0xf2, 0x8e, 0xb1, 0xff, 0xbf, 0x5d, 0x81, 0xa4, 0xbf, 0xf6, 0xff, 0xff, 0x80, 0x47, 0xdb, 0xa3, 0x4c, 0xba, 0x5f, 0xdd, 0x61, 0x8c, 0xb7, 0xf6, 0x04, 0x97, 0x44, 0xb4, 0x29, 0x46, 0x1b, 0x64, 0xbe, 0xba, 0xb7, 0x88, 0xa5, 0x0f, 0x0f, 0x69, 0x83, 0x8a, 0x76, 0x9a, 0x4a, 0x08, 0x24, 0xf9, 0x50, 
        0x9b, 0x4c, 0x68, 0x17, 0x9d, 0xff, 0xea, 0xd0, 0xae, 0x17, 0xa5, 0x8d, 0x7c, 0x37, 0xf2, 0x22, 0xbe, 0xcb, 0x1f, 0x05, 0x37, 0x1e, 0xbb, 0x71, 0x21, 0x4f, 0xde, 0xdd, 0xc5, 0xa4, 0x56, 0xf5, 0x77, 0x8d, 0x6f, 0xb2, 0xae, 0x9b, 0xb5, 0xf1, 0xc4, 0x5f, 0x42, 0x68, 0x57, 0xbd, 0xdd, 0x7a, 0xef, 0xb4, 0x5b, 0x97, 0xdd, 0x86, 
        0x99, 0xf8, 0xf2, 0xc2, 0x9e, 0xfe, 0xbe, 0xf1, 0xb2, 0xd3, 0xaa, 0xbf, 0x6d, 0x74, 0xed, 0x9f, 0xcf, 0x9a, 0x27, 0x27, 0xa7, 0x0d, 0xdc, 0xff, 0xed, 0x98, 0x9f, 0xea, 0xb5, 0x6e, 0x1d, 0x37, 0xd4, 0x33, 0xeb, 0x4b, 0x65, 0xd8, 0x7c, 0xf2, 0x44, 0x73, 0xcd, 0x53, 0x77, 0x38, 0xaf, 0xc3, 0x60, 0x1c, 0xe8, 0x1b, 0x9c, 0xe6, 
        0x96, 0xe7, 0x70, 0x36, 0x26, 0xaf, 0x29, 0x77, 0xa4, 0xa6, 0xde, 0x78, 0x37, 0x41, 0x78, 0xaf, 0xe7, 0x83, 0x75, 0x84, 0x67, 0x6e, 0xa9, 0x82, 0x48, 0x57, 0x93, 0x70, 0xab, 0xcf, 0x0e, 0x62, 0x02
        };

    auto [result, it] = Frame::find(buffer);

    CHECK(result.has_value());
    CHECK(it != buffer.end());

}